/**
 * Copyright (C) 2009 Sly Technologies, Inc. This library is free software; you
 * can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version. This
 * library is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details. You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */
package org.jnetpcap.packet.analysis;

import org.jnetpcap.packet.JPacketHandler;

/**
 * Capture, decode and analyze stream of packets. This interface provides
 * methods that allow a capture of certain amount of packets. Have the packets
 * decoded using jNetPcap's packet scanner and analyzed using
 * <code>JRegistry</code> registered protocol analyzers.
 * 
 * @author Mark Bednarczyk
 * @author Sly Technologies, Inc.
 */
public interface JAnalyze {
	/**
	 * Captures packets, decodes each header using a native scanner and analyzes
	 * the packet stream. Packets are analyzed using protocol analyzers registered
	 * with <code>JRegistry</code>. No user packet handler is registered.
	 * Captured packet will be consumed, but they will be analyzed. The user will
	 * have to register a protocol specific handler with a protocol. Here is an
	 * example:
	 * 
	 * <pre>
	 * HttpAnalyzer analyzer = JRegistry.getAnalyzer(HttpAnalyzer.class);
	 * analyzer.add(new HttpHandler() {
	 * 
	 * 	// Handle processed http headers
	 * 	public void processHttp(Http http) {
	 * 	}
	 * });
	 * </pre>
	 * 
	 * The protocol specific listener has to be registered with the analyzer
	 * before the call to <code>Pcap.analyze</code> method.
	 * <p>
	 * This method invokes pcap capture to grab infinate amount of packets, or
	 * until the capture source is closed.
	 * </p>
	 * 
	 * @return Total number of packets that were captured. The count does not
	 *         include new packets that were generated by analyzers.
	 */
	public int analyze();

	/**
	 * Captures packets, decodes each header using a native scanner and analyzes
	 * the packet stream. Packets are analyzed using protocol analyzers registered
	 * with <code>JRegistry</code>. No user packet handler is registered.
	 * Captured packet will be consumed, but they will be analyzed. The user will
	 * have to register a protocol specific handler with a protocol. Here is an
	 * example:
	 * 
	 * <pre>
	 * HttpAnalyzer analyzer = JRegistry.getAnalyzer(HttpAnalyzer.class);
	 * analyzer.add(new HttpHandler() {
	 * 
	 * 	// Handle processed http headers
	 * 	public void processHttp(Http http) {
	 * 	}
	 * });
	 * </pre>
	 * 
	 * The protocol specific listener has to be registered with the analyzer
	 * before the call to <code>Pcap.analyze</code> method.
	 * 
	 * @param count
	 *          max number of packets to capture before returning
	 * @return Total number of packets that were captured. The count does not
	 *         include new packets that were generated by analyzers.
	 */
	public int analyze(int count);

	/**
	 * Captures packets, decodes each header using a native scanner and analyzes
	 * the packet stream. Packets are analyzed using protocol analyzers registered
	 * with <code>JRegistry</code>.
	 * <p>
	 * Analyzer's capture infinate amount of packets or until the capture source
	 * is closed.
	 * </p>
	 * 
	 * @param <T>
	 *          type for user object passed to the packet handler
	 * @param handler
	 *          user packet handler that will receive all captured packets
	 * @param user
	 *          user object of type <T>
	 * @return Total number of packets that were captured. The count does not
	 *         include new packets that were generated by analyzers.
	 */
	public <T> int analyze(JPacketHandler<T> handler, T user);

	/**
	 * Captures packets, decodes each header using a native scanner and analyzes
	 * the packet stream. Packets are analyzed using protocol analyzers registered
	 * with <code>JRegistry</code>.
	 * 
	 * @param <T>
	 *          type for user object passed to the packet handler
	 * @param count
	 *          max number of packets to capture before returning
	 * @param handler
	 *          user packet handler that will receive all captured packets
	 * @param user
	 *          user object of type <T>
	 * @return Total number of packets that were captured. The count does not
	 *         include new packets that were generated by analyzers.
	 */
	public <T> int analyze(int count, JPacketHandler<T> handler, T user);

}
